// firebase
import db from '@/firebase/init'
import firebase from 'firebase/app'

const buttonsInList = {
    methods: {
        // BOOKMARK BUTTON IN LIST//
        // used in movies and shows component
        // ----------------------------------

        // add item to watchlist and send to firebase
        // ------------------------------------------
        // obj = item object (movie or tv), 
        // type = movie or tv, 
        // href = singleMovie or singleShow
        addMarkedItem(obj, type, href){
            // add marked item to watchlist collection
            db.collection('watchlist').add({
                id:             "", // id in firebase - autogenerated by firebase
                iId:            obj.id, // item id from API
                title:          obj.title,
                genres:         obj.genre_ids,
                poster:         obj.poster_path,
                rate:           obj.vote_average,
                release_date:   obj.release_date,
                user:           this.user.id,
                media_type:     type,
                href:           href,
                department:     'watchlist',
                added:          Date.now()
            }).then(() => {
                // alert type and settings
                this.alert.type = "success"
                this.infoAlert("Successfully added to watchlist")
                
            })
            .catch(err => {
                console.log(err)
            })
        },

        // delete item from firebase
        // -------------------------
        // id = item id in firebase
        // arr = local array of items (user.movies.mark or user.shows.mark)
        deleteMarkedItem(id, arr){
            // *iId (item id) is id of movie from API and id is id of item in firebase
            db.collection('watchlist').where('user', '==', this.user.id).where('iId', '==', id).get()
            .then(snapshot => {
                // id of item in firebase
                let snapshotID = snapshot.docs[0].id
                // delete item from firebase
                db.collection('watchlist').doc(snapshotID).delete().then(()=> {
                    // delete from local array
                    arr = arr.filter(item =>{
                        return item.id != snapshotID
                    }) 
                }) 
            }) 
            // alert type and settings
            this.alert.type = "success"
            this.infoAlert("Successfully removed from watchlist.")   
        },

        // add or remove bookmark 
        // ----------------------
        // id = item id in firebase
        // obj = item object (movie or tv), 
        // arr = local array of items (user.movies.mark or user.tv.mark)
        // type = movie or tv, 
        // href = singleMovie or singleShow
        toggleBookmark(id, obj, arr, type, href){
          
            // if user is login then:
            if(firebase.auth().currentUser){
                // if movie/tv is marked then:
                if (this.isItem(id, arr)) {
                    // delete movie/tv from watchlist
                    this.deleteMarkedItem(id, arr)
               
                // if movie/tv is not marked then:
                } else if (!this.isItem(id, arr)) {
                    // add movie/tv to watchlist
                    this.addMarkedItem(obj, type, href)
                }
            // if user is not login then:
            } else {
                // show alert 
                this.alert.type = "error"
                this.infoAlert("You must log in.")
            }
        },
    }
}

const buttonsInDetail = {
    methods: {
        // BOOKMARK/SEEN BUTTON IN DETAIL//
        // used in movie and tv detail page
        // --------------------------------

        // add item to database
        // ------------------------
        // dbName = name of database
        // type = tv or movie
        // href = singleMovie or singleShow
        // curRate = user movie/tv rating
        addItemToDB(dbName, type, href, curRate = 0){
            // add marked item to firebase collection (watchlist, seen)
            db.collection(dbName).add({
                id: "", // id in firebase - autogenerated by firebase
                iId:            this.$route.params.id, // item id from API
                title:          this.detail.data.title,
                poster:         this.detail.data.poster_path,
                release_date:   this.detail.data.release_date,
                rate:           this.detail.data.vote_average,
                genres:         this.detail.data.genres,
                user:           this.user.id,
                user_rate:      curRate,
                media_type:     type,
                href:           href,
                department:     dbName,
                added:          Date.now()
            }).then(() => {
                // alert type and settings
                this.alert.type = "success"
                this.infoAlert(`Successfully added to ${dbName}.`)

            }).catch(err => {
                console.log(err)
            })
        },

        // delete item from database
        // ------------------------
        // itemID = item id, 
        // movieList = array with items, 
        // dbName = name fo database (watchlist, seen)
        deleteItemFromDB(itemID, movieList, dbName){
            // *iId (item id) is id of movie from API and id is id of item in firebase
            db.collection(dbName).where('user', '==', this.user.id).where('iId', '==', itemID).get()
            .then(snapshot => {
                snapshot.forEach(doc => {
                    // delete from firebase database
                    db.collection(dbName).doc(doc.id).delete().then(()=> {
                        // delete from local array
                        movieList = movieList.filter(item =>{
                            return item.id != doc.id
                        })
                    })  
                })
            })

            // alert type and settings
            this.alert.type = "success"
            this.infoAlert(`Successfully removed from ${dbName}.`)     
            // close rating modal
            this.box.rate = false
        },
        
        // add item to database or remove item from database 
        // -------------------------------------------------
        // itemID = movie id, 
        // movieList = movie array, 
        // dbName = name of firebase database,
        // type = movie or tv, 
        // href = singleMovie or singleShow
        toggleItemInDB(itemID, movieList, dbName, type, href){
   
            // if user is login then:
            if(firebase.auth().currentUser){
                // if movie is marked then:
                if (this.isItem(itemID, movieList)) {
                    // remove movie from watchlist
                    this.deleteItemFromDB(itemID, movieList, dbName)
                // if movie is not marked then:
                } else if (!this.isItem(itemID, movieList)) {
                    // add movie to watchlist
                    this.addItemToDB(dbName, type, href)
                }
            // if user is not login then:
            } else {

                // show alert 
                this.alert.type = "error"
                this.infoAlert("You must log in.")
            }
        },

        // RATING //
        // used in movie and tv detail page
        // --------------------------------

        // update rating
        // -------------
        // id = item id in firebase,
        // curRate = user rating
        updateRateItem(id, curRate){
            // *iId (item id) is id of movie from API and id is id of item in firebase
            db.collection('rating').where('user', '==', this.user.id).where('iId', '==', id).get()
            .then(snapshot => {
                snapshot.forEach(doc => {
                    db.collection('rating').doc(doc.id).update({
                        user_rate: curRate

                    }).then(() => {

                        // alert type and settings
                        this.alert.type = "success"
                        this.infoAlert("Successfully update")

                    }).catch(err => {
                        console.log(err)
                    })
                })
            })
        },
        
        // toggle rating button
        // --------------------
        // curRate = current user rating,
        // arr = local array with items,
        // type = movie or tv, 
        // href = singleMovie or singleShow
        ratingButton(curRate, arr, type, href){
            // if user is login then:
            if(firebase.auth().currentUser){
                // if movie/tv is not rated:
                if (this.isItem(this.$route.params.id, arr)) {
                    // update rating
                    this.updateRateItem(this.$route.params.id, curRate)
                // if movie/tv is not rating:
                } else if (!this.isItem(this.$route.params.id, arr)) {
                    // rate movie/tv
                    this.addItemToDB('rating', type, href, curRate)
                }
            // if user is not login then:
            } else {
                // show alert 
                this.alert.type = "error"
                this.infoAlert("You must log in.")
            }
            // close rating modal
            this.box.rate = false
        },
    }
}

export {
    buttonsInList,
    buttonsInDetail
}

